/**
 * 比如把 "12345678"，变成 "12,345,678"。
 * 思路：可见是需要把相应的位置替换成 ","。
 * ()表示它是一个整体 
 */

const string = "12345678"

/**
 * 正则是如何进行匹配的
 * 所以它会按照你写的正则表达式也就是规则去匹配字符串
 * 所以最重要的是你要明白自己写的规则
 * 已经被匹配过的字符串或者位置是不会再进行匹配 所以你得明白是匹配字符还是匹配位置
 * const string = "12345678"
 * const regex = /(?=(\d{3})+$)/g
 * 改正则表达式如何匹配这个字符串呢
 * 多组三个连续数字的字符并且这个字符还要有结尾的位置 显示345678是符合的（这是两组）根据(?=p)的意思是匹配p前面的位置
 * 匹配完这个位置后就不匹配了 由于全局匹配就会继续匹配，这时候找到678发现也是符合的（8后面的位置就是结尾）
 * 这样一想我们通过一个规则 让匹配自己去运行  正则表达式相当于参数意义，所以还是要知道底层是到底运行的还是有必要的
 * 注意还要读得可视化正则表达式 就知道了
 * 12,345678 
 * 12,345,678
 */
const regex = /(?=(\d{3})+)/g
/**
 * (\d{3})+$ 是这个位置的前面
 */
const regex1 = /(?=(\d{3})+$)/g
const regex2 = /(?=(\d{3})+$)/

/**
 * $(美元符号)匹配结尾，在多行匹配中匹配行结尾
 * 也就是regex2 = /(?=(\d{3})+$)/这个正则表达式其中一点是要求要匹配到结尾的位置
 */

console.log(string.match(regex));

console.log(string.replace(regex, ',')); // ,1,2,3,4,5,678
console.log(string.replace(regex1, ',')); // 12,345,678
console.log(string.replace(regex2, ',')); //12,345678